// --- CONFIGURACI√ìN ---
// PEGA AQU√ç LA URL DE TU APLICACI√ìN WEB DE GOOGLE SCRIPT (del Paso 2)
const GOOGLE_SCRIPT_URL =
  "https://script.google.com/macros/s/AKfycbymx-wFLaxfykPviuE8fgB0bs2NuvX5Tzijt7kTiYmOtD4pum14jCrBqKc4OWoliEVZaw/exec";

document.addEventListener("DOMContentLoaded", () => {
  const params = new URLSearchParams(window.location.search);
  const teacherName = params.get("teacher");
  const appContainer = document.getElementById("app-container");

  if (!teacherName) {
    renderError(
      appContainer,
      "No se especific√≥ un docente. Por favor, use un link con el formato `?teacher=NOMBRE_DEL_DOCENTE`"
    );
    return;
  }

  // Actualizar el t√≠tulo de la p√°gina mientras carga
  document.title = `Dashboard - ${teacherName}`;

  // Llamar a la API de Google
  fetch(`${GOOGLE_SCRIPT_URL}?teacher=${encodeURIComponent(teacherName)}`)
    .then((response) => response.json())
    .then((data) => {
      if (data.error) {
        throw new Error(data.message);
      }
      renderDashboard(appContainer, data);
    })
    .catch((error) => {
      console.error("Error al obtener los datos:", error);
      renderError(
        appContainer,
        `No se pudieron cargar los datos para "${teacherName}". Raz√≥n: ${error.message}`
      );
    });
});

function renderError(container, message) {
  container.innerHTML = `
    <div class="loading-container">
      <div class="loader-icon" style="color: var(--accent-warning);"><i class="fas fa-exclamation-triangle"></i></div>
      <h1>Error de Carga</h1>
      <p>${message}</p>
    </div>`;
}

function renderDashboard(container, data) {
  const { teacherName, classes, currentDate } = data;
  const teacherInitial =
    teacherName && teacherName.length > 0
      ? teacherName.charAt(0).toUpperCase()
      : "?";

  // Agrupar clases por programa
  const groupedByProgram = {};
  classes.forEach((cls) => {
    const programKey = cls.programas || "Programa no especificado";
    if (!groupedByProgram[programKey]) groupedByProgram[programKey] = [];
    groupedByProgram[programKey].push(cls);
  });

  const programCount = Object.keys(groupedByProgram).length;
  const moduleCount = classes.length;

  // Generar el HTML completo
  container.innerHTML = `
    <div class="dashboard-layout">
      <!-- SIDEBAR -->
      <aside class="dashboard-sidebar">
        <div class="sidebar-header">
          <span class="logo-text" style="background: linear-gradient(to right, #0024ff, #eaf603); -webkit-background-clip: text; -webkit-text-fill-color: transparent; display: inline-block;">Esam<span>.</span>Monteagudo</span>
        </div>
        <div class="teacher-profile">
          <div class="avatar">${teacherInitial}</div>
          <div class="name">${teacherName}</div>
          <div class="role">Docente / Consultor</div>
        </div>
        <ul class="sidebar-nav"><li class="active"><a href="#"><i class="fas fa-chalkboard-user"></i> Mis M√≥dulos</a></li></ul>
        <div class="summary-title">Resumen General</div>
        <div class="summary-container">
            <div class="summary-card">
              <div class="summary-chart">
                  <svg width="50" height="50" viewBox="0 0 40 40">
                      <circle class="donut-chart-bg" cx="20" cy="20" r="18" fill="transparent" stroke-width="3"></circle>
                      <circle class="donut-chart-fg" cx="20" cy="20" r="18" fill="transparent" stroke-width="3.5" stroke-dasharray="113.04" stroke-dashoffset="${
                        113.04 -
                        (programCount * 15 > 113.04
                          ? 113.04
                          : programCount * 15)
                      }"></circle>
                  </svg>
              </div>
              <div class="summary-info"><div class="value">${programCount}</div><div class="label">Programas</div></div>
            </div>
            <div class="summary-card">
              <div class="summary-chart">
                  <svg width="50" height="50" viewBox="0 0 40 40">
                      <circle class="donut-chart-bg" cx="20" cy="20" r="18" fill="transparent" stroke-width="3"></circle>
                      <circle class="donut-chart-fg" cx="20" cy="20" r="18" fill="transparent" stroke-width="3.5" stroke-dasharray="113.04" stroke-dashoffset="${
                        113.04 -
                        (moduleCount * 5 > 113.04 ? 113.04 : moduleCount * 5)
                      }"></circle>
                  </svg>
              </div>
              <div class="summary-info"><div class="value">${moduleCount}</div><div class="label">M√≥dulos</div></div>
            </div>
        </div>
        <div class="sidebar-footer">Informaci√≥n actualizada: ${currentDate}</div>
      </aside>

      <!-- MAIN CONTENT -->
      <main class="dashboard-main">
        <header class="main-header fade-in-stagger">
          <h1>Universo Docenteüßë‚Äçüéì</h1>
          <p>Bienvenido a tu centro de mando. Revisa tus programas y clases.</p>
        </header>
        ${
          classes.length > 0
            ? generateAccordionHTML(groupedByProgram)
            : generateNoClassesHTML()
        }
      </main>
    </div>
  `;

  // A√±adir la l√≥gica del acorde√≥n despu√©s de que el HTML exista en el DOM
  setupAccordion();
}

function generateAccordionHTML(groupedByProgram) {
  let html = '<div class="accordion-container fade-in-stagger">';
  for (const programaNombre in groupedByProgram) {
    const modules = groupedByProgram[programaNombre];
    html += `
      <div class="program-pod">
        <div class="pod-header">
          <div class="pod-header-info">
            <i class="fas fa-satellite-dish icon"></i>
            <span>${programaNombre}</span>
            <span class="pod-module-count">${modules.length} M√≥dulo(s)</span>
          </div>
          <i class="fas fa-chevron-down pod-chevron"></i>
        </div>
        <div class="pod-content">
          ${modules
            .map(
              (clase) => `
            <div class="module-card">
              <h3 class="module-title"><i class="fas fa-book-open"></i>${
                clase.modulo
              } (M√≥dulo ${clase.numeros})</h3>
              <div class="module-details">
                <div class="detail-item"><i class="fas fa-calendar-day"></i><strong>D√≠as:</strong> ${
                  clase.dias
                }</div>
                <div class="detail-item"><i class="fas fa-clock"></i><strong>Horario:</strong> ${
                  clase.hora
                }</div>
                <div class="detail-item"><i class="fas fa-file-alt"></i><strong>Origen:</strong> ${
                  clase.hoja
                } (F:${clase.filaOriginal})</div>
              </div>
              ${
                clase.fechasModulo && clase.fechasModulo.length > 0
                  ? generateTimelineHTML(clase.fechasModulo)
                  : ""
              }
            </div>
          `
            )
            .join("")}
        </div>
      </div>`;
  }
  html += "</div>";
  return html;
}

function generateTimelineHTML(fechasModulo) {
  const hoyDate = new Date();
  hoyDate.setHours(0, 0, 0, 0);

  const listItems = fechasModulo
    .map((fechaStr) => {
      let liClass = "",
        statusText = "";
      const claseDate = parseDateStringHelper(fechaStr);

      if (claseDate) {
        if (claseDate.getTime() < hoyDate.getTime()) {
          liClass = "past-date";
          statusText = "Finalizada";
        } else if (claseDate.getTime() === hoyDate.getTime()) {
          liClass = "today-date";
          statusText = "Hoy";
        } else {
          liClass = "future-date";
          statusText = "Pr√≥xima";
        }
      } else {
        liClass = "future-date";
        statusText = "Revisar";
      }

      return `<li class="${liClass}"><span class="date-text">${fechaStr}</span><span class="status-badge">${statusText}</span></li>`;
    })
    .join("");

  return `<div class="timeline-container"><ul class="dates-list">${listItems}</ul></div>`;
}

function generateNoClassesHTML() {
  return `
    <div class="fade-in-stagger" style="text-align:center; padding: 40px; background: var(--bg-glass); border-radius: var(--border-radius); border: 1px solid var(--border-glass);">
      <i class="fas fa-rocket" style="font-size: 48px; color: var(--accent-primary); margin-bottom: 20px;"></i>
      <h2 style="font-size: 24px; margin-bottom: 10px;">¬°Todo listo para el despegue!</h2>
      <p style="color: var(--text-secondary);">Actualmente no tienes clases o m√≥dulos asignados. <br/>Contacta al administrador para recibir tu pr√≥xima misi√≥n.</p>
    </div>`;
}

function setupAccordion() {
  const pods = document.querySelectorAll(".program-pod");
  pods.forEach((pod) => {
    const header = pod.querySelector(".pod-header");
    header.addEventListener("click", () => {
      const content = pod.querySelector(".pod-content");
      const isActive = pod.classList.contains("active");

      pods.forEach((p) => {
        if (p !== pod) {
          p.classList.remove("active");
          p.querySelector(".pod-content").style.maxHeight = null;
        }
      });

      if (!isActive) {
        pod.classList.add("active");
        content.style.maxHeight = content.scrollHeight + "px";
      } else {
        pod.classList.remove("active");
        content.style.maxHeight = null;
      }
    });
  });

  const firstPod = document.querySelector(".program-pod");
  if (firstPod) {
    firstPod.classList.add("active");
    const firstContent = firstPod.querySelector(".pod-content");
    setTimeout(() => {
      firstContent.style.maxHeight = firstContent.scrollHeight + "px";
    }, 100);
  }
}
